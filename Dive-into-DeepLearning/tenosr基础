
import torch
import numpy as np
"""
    生成tensor
    1.torch.empty(size):返回一个size的未初始化的tensor
    2.torch.rand(size):返回一个size大小的0-1均匀分布取值的tensor
    3.torch.randn(size):返回一个size大小的0-1标准正态分布取值的tensor
    4.torch.ones / torch.zeros(size,dtype=)：返回一个全0/1的tensor
    5.torch.Tensor(list):直接创建tensor
    6.torch.arange(start,end,step):返回[start,end),step的一维tensor
    7.通过tensor.size() / tensor.shape 查看tensor的维度
"""
a = torch.empty(3,4)
b = torch.rand(2,3)
# b-> tensor([[0.4850, 0.1557, 0.2747],
#         [0.7538, 0.3078, 0.6697]])
c = torch.randn(2,3)
d = torch.ones(3,5,dtype=torch.long)
# d -> tensor([[1, 1, 1, 1, 1],
#         [1, 1, 1, 1, 1],
#         [1, 1, 1, 1, 1]])
e = torch.Tensor([[1,2,3],[4,5,6]]) # <class 'torch.Tensor'>
f = torch.arange(1,5,step=1) # tensor([1, 2, 3, 4])

"""
    tensor操作
    1.+(torch.add) - * / ** :都是对tensor对应元素位置做运算
    2.torch.exp(x): 对每个元素求exp
    3.x.abs():对每个位置元素求绝对值
    4.x.sum(axis=0/1):求和，axis=0 // torch.sum(tensor,dim=0/1..)
        对一个tensor.size([2,5,4]),从左往右分别是第0、1、2维，dim/axis=？就对？维压缩，也就是该维弄为1 【2*5*4 2个5*4的】
        如dim=0 结果就是：5*4 dim=1 结果是：2*4 dim=2 结果是：2*5
    改变形状
    1.x.view()
        x.view(int) 只有一个值的话该值必须和x的元素个数一样
        x.view(-1,int) -1的维数会自动计算
        需要注意的是：view相当于改变的是观察的角度，和源数据是同源的
    2.x.reshape():也可以改变形状，而且不同源，但是更推荐用：x.clone().view()来实现
    3.x.flatten():将任意维度转化为一维向量
    4.x.squeeze():压缩张量，去掉维数为1位置的维度
    5.x.unsqueeze():解压张量,给指定位置加上维数为1的维度
    6.x.item():把一个tensor转为一个标量
"""
t1 = torch.Tensor([2,4,6])
t2 = torch.Tensor([1,3,5])
# t1*t2 = tensor([ 2., 12., 30.])
# t1/t2 = tensor([2.0000, 1.3333, 1.2000])
t3 = torch.Tensor([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) # 4*3
# print(torch.sum(t3,dim=1)) # 2*1  [6,15,24]
# print(torch.sum(t3,dim=0)) # [12,15,18]
t4 = t3.view(12) # tensor([1., 2., 3., 4., 5., 6., 7., 8., 9.,10.,11.,12.])
t5 = t3.view(-1,2) #
# t5 -> tensor([[ 1.,  2.],
#           [ 3.,  4.],
#           [ 5.,  6.],
#           [ 7.,  8.],
#           [ 9., 10.],
#           [11., 12.]])
t6 = t3.flatten() # tensor([ 1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12.])
t7 = torch.Tensor([1.0])
# print(type(t7.item())) <class 'float'>

"""
    tensor和numpy相互转化
    1.tensor -> numpy
        x.numpy() 共享内存，改变速度很快
    2.numpy -> tensor
        torch.from_numpy(x) 共享内存，改变很快
        torch.Tensor(numpy_array) 深拷贝，新建内存
    
    CPU和GPU相互转化：通过x.to(device)
"""
aa = np.ones(5)
bb = torch.from_numpy(aa)
cc = torch.Tensor(bb)

dd = torch.ones(5)
ee = dd.numpy()

if torch.cuda.is_available():
    device = torch.device("cuda")
else:
    device = torch.device("cpu")

# device = "cuda" if torch.cuda.is_available() else "cpu"



